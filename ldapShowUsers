#! /usr/bin/python

import sys
import ldap
from optparse import OptionParser

from ldapConf import *
from ldapUtil import *


####################################################################################
# global constants
####################################################################################
version="%prog: 2012-09-03"
modifiedBy="Garry Thuna"


###################################################################################
# parse command line options
###################################################################################
usage = "usage: %prog [options] [uid1 [[uid2] [[...]]]" 
description = "Print the list of users defined under " + BASE_DN
parser = OptionParser(usage=usage, version=version, description=description)
parser.add_option("-m", "--membership", action="store_true", dest="showMembership", default=False,
                        help="show group membership for each user [default: %default]")
parser.add_option("-s", "--simple", action="store_false", dest="showMembership",
                        help="do not show group membership information in the output")
(options, args) = parser.parse_args()


####################################################################################
# bind to the ldap server
#     do the preliminary procssing of users and groups
#     do the preliminary procssing of workspaces
####################################################################################
con = ldap.initialize(BIND_URI)
con.simple_bind_s(BIND_DN, BIND_PW)

groups,                \
    users,             \
     gnum2idx,         \
     gid2idx,          \
     uid2idx,          \
     belongsTo,        \
    workspaces,        \
     gtwsName2ws,      \
     gtwsName2path,    \
     gnum2gtwsName,    \
    servers,           \
     gtsName2server  = preProcessLdapObjects(con)

con.unbind_s()


print '==============================================================='
print '= User list                                                   ='
print '==============================================================='
for u in users:
    if len(args) > 0 and u[1]['uid'][0].lower() not in [a.lower() for a in args]:
        continue
    print (u[1]['uid'][0] + ' (' + u[1]['uidNumber'][0] + ') ').ljust(35) \
        + 'dn: ' + u[0]
    if options.showMembership:
        if u[1]['uid'][0] in belongsTo:
            for gnum in belongsTo[ u[1]['uid'][0] ]:
                print ''.ljust(12) + 'member of: ' \
                    + groups[ gnum2idx[ gnum ] ][1]['cn'][0] \
                    + ' (' + gnum + ')'



