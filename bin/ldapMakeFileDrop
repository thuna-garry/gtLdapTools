#! /usr/local/bin/python

import sys
import os
import ldap
import subprocess
from optparse import OptionParser
import tempfile

sys.path.append(os.path.realpath(os.path.join(__file__, '..', '..', 'conf')))
from ldapConf import *
from ldapUtil import *


###################################################################################
# global constants
###################################################################################
version="%prog: 2012-09-26"
modifiedBy="Garry Thuna"


###################################################################################
# parse command line options
###################################################################################
usage = "usage: %prog [options] <workspace name>" 
description = "Creates within a workspace one directory for each user who's "  +\
              "home directory is on the serverr.  ACLs on these directories "  +\
              "are set so that all staff will be able to save files into any " +\
              "of the direcgtories but only the particular user whom the "     +\
              "directory is named after will be able to view or delete files"
parser = OptionParser(usage=usage, version=version, description=description)
parser.add_option("-f", "--force-acls", action="store_true", dest="force", default=False,
                        help="force the recursive application of ACLs even if " +\
                             "the parent dir seems to already be set correctly")
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="show changes made to file system [default: %default]")
(options, args) = parser.parse_args()


if len(args) != 1:
    parser.print_help(sys.stderr)
    sys.exit(1)
targetWS = args[0]


###################################################################################
# bind to the ldap server
#     do the preliminary procssing of users and groups
#     do the preliminary procssing of workspaces
###################################################################################
con = ldap.initialize(BIND_URI)
if BIND_TLS:
    con.start_tls_s()
con.simple_bind_s(BIND_DN, BIND_PW)

groups,                \
    users,             \
     gid2group,        \
     uid2user,         \
     belongsTo,        \
    workspaces,        \
     gtwsName2ws,      \
     gtwsName2path,    \
     gid2gtwsName,     \
     uid2gtwsName,     \
    servers,           \
     gtsName2server  = preProcessLdapObjects(con)

con.unbind_s()


###################################################################################
# set up the drop directories
###################################################################################
for ws in workspaces:
    wsDn, wsAttrs = ws
    gtwsName = wsAttrs['gtwsName'][0]

    # is the workspace located on this server
    wsServer, wsPath = gtwsName2path[getQualGtwsName(ws)]
    if wsServer != SERVER_SHORT_NAME:
        continue  #foreign ws

    # is this the workspace named on the command line
    if gtwsName != targetWS:
        continue

    # check that the workspace directory exists
    wsDir = os.path.join(SAMBA_WORKSPACE, wsServer, wsPath)
    if options.verbose: 
        print '    ensuring workspace directory exists:  ' + wsDir
    if not os.path.exists(wsDir):
        print >> sys.stderr, '  *** Error workspace directory "' + wsDir + '" does not exist.'
        sys.exit(1)

    # assemble the acls in a tempFile
    fd, fname = tempfile.mkstemp(prefix='aclFile_', suffix='.tmp')
    if options.verbose: 
        print '    writing acls to a temp file ' 
    with open(fname, 'w') as f:
        f.write(ACL_POSIX_WORKSPACE_FILEDROP.format(tag='group', qualifier=MEMBERFULL_GID) + '\n' )
        f.write(ACL_POSIX_WORKSPACE_TRAILER + '\n' )
    os.close(fd)

    for u in users:
        uDn, uAttrs = u
        uid = uAttrs['uid'][0]

        # is the user's home is on this server
        if 'sambaHomePath' not in uAttrs:
            print >> sys.stderr, '  *** Error no "sambaHomePath" set for user: ' + uid
            continue
        if uAttrs['sambaHomePath'][0].lower().find(SERVER_SHORT_NAME.lower()) < 0:
            continue

        if options.verbose: 
            print 'processing user:',
            print uid \
                + '  (' + uAttrs['uidNumber'][0] + ')  ' \
                + 'dn: ' + uDn

        # create user's file drop directory
        userDir = os.path.join(wsDir, uid)
        if options.verbose: 
            print '    ensuring user file drop directory exists:       ' + userDir
        p = subprocess.Popen([ "mkdir", "-p", userDir ]); p.wait()
        if p.returncode:
            print >> sys.stderr, '  *** Error (re)creating directory: ' + userDir

        # construct the command to apply the acls
        cmd = [ os.path.join( os.path.split(sys.argv[0])[0], "setfacl_recursively.sh" ), 
                '-u', uid,
                '-g', MEMBERLESS_GID,
                '-p', '02770', 
                fname, userDir ]
        if options.force:
            cmd.insert(1, '-f')

        # apply them
        if options.verbose:
            print '    applying ACLs to user file drop dir:            ' + userDir
            p = subprocess.Popen(cmd); p.wait()
        else:
            with open('/dev/null', 'w') as f:
                p = subprocess.Popen(cmd, stdout=f); p.wait()
        if p.returncode:
            print >> sys.stderr, '  *** Error applying ACLs: ' + userDir + " (" + str(p.returncode) + ")"

   # cleanup temp file
    os.unlink(fname)

