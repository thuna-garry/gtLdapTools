#! /usr/local/bin/python

import sys
import os
import ldap
import subprocess
from optparse import OptionParser
import tempfile

sys.path.append(os.path.realpath(os.path.join(__file__, '..', '..', 'conf')))
from ldapConf import *
from ldapUtil import *


###################################################################################
# global constants
###################################################################################
version="%prog: 2012-09-26"
modifiedBy="Garry Thuna"


###################################################################################
# parse command line options
###################################################################################
usage = "usage: %prog [options] [aws1 [[aws2] [[...]]]" 
description = "Ensures that the workspace directory exists, "  +\
              "that it has correct user, group and acl"
parser = OptionParser(usage=usage, version=version, description=description)
parser.add_option("-f", "--force-acls", action="store_true", dest="force", default=False,
                        help="force the recursive application of ACLs even if " +\
                             "the parent dir seems to already be set correctly")
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="show changes made to file system [default: %default]")
(options, args) = parser.parse_args()


###################################################################################
# bind to the ldap server
#     do the preliminary procssing of users and groups
#     do the preliminary procssing of workspaces
###################################################################################
con = ldap.initialize(BIND_URI)
if BIND_TLS:
    con.start_tls_s()
con.simple_bind_s(BIND_DN, BIND_PW)

groups,                \
    users,             \
     gid2group,        \
     uid2user,         \
     belongsTo,        \
    workspaces,        \
     gtwsName2ws,      \
     gtwsName2path,    \
     gid2gtwsName,     \
     uid2gtwsName,     \
    servers,           \
     gtsName2server  = preProcessLdapObjects(con)

con.unbind_s()


###################################################################################
# set up the workspaces
###################################################################################
smbConf = ''  #string in which to accumulate the samba share definitions
for ws in workspaces:
    dn, attrs = ws
    gtwsName = attrs['gtwsName'][0]

    # is the workspace located on this server
    server, path = gtwsName2path[getQualGtwsName(ws)]
    if server != SERVER_SHORT_NAME:
        continue  #foreign ws

    # accumulate the share definition in a string
    wsDir = os.path.join(SAMBA_WORKSPACE, server, path)
    smbConf = smbConf + SAMBA_WORKSPACE_TEMPLATE.format(
            shareName    = gtwsName,
            shareComment = attrs.get('description', ['no description supplied'])[0],
            sharePath    = wsDir
        )
    if 'gtwsRecycleBinDays' in attrs:
        if attrs['gtwsRecycleBinDays'][0] > 0:
            smbConf = smbConf + SAMBA_RECYCLE_TEMPLATE.format( recycleDir = SAMBA_RECYCLE_DIR )

    # sanity check that the workspace owner is valid
    if attrs['gtwsOwnerUid'][0] not in uid2user:
        print >> sys.stderr, '  *** Error: workspace "' + gtwsName \
                             + '" has gtwsOwnerUid "' \
                             + aclTarget + '" which is not a valid userId'

    # sanity check that the workspace administrators are valid
    if 'gtwsAdministratorUid' in attrs:
        for administratorUid in attrs['gtwsAdministratorUid']:
            if administratorUid not in uid2user:
                print >> sys.stderr, '  *** Error: workspace "' + gtwsName \
                                     + '" has gtwsAdministratorUid "' \
                                     + aclTarget + '" which is not a valid userId'

    # determine the access lists for the workspace
    if 'gtwsACL' in attrs:
        readList = []
        writeList = []
        for acl in attrs['gtwsACL']:
            aclTag, aclTarget, aclAccess = acl.split(':')
            if aclTag.lower() == "user":
                if aclTarget not in uid2user:
                    print >> sys.stderr, '  *** Error: workspace "' + gtwsName \
                                         + '" has acl qualifier "' \
                                         + aclTarget + '" which is not a valid userId'
                if aclAccess == 'view':
                    readList.append(aclTarget)
                elif aclAccess == 'work':
                    writeList.append(aclTarget)
            elif aclTag.lower() == "group":
                if aclTarget not in gid2group:
                    print >> sys.stderr, '  *** Error: workspace "' + gtwsName \
                                         + '" has acl qualifier "' \
                                         + aclTarget + '" which is not a valid groupId'
                if aclAccess == 'view':
                    readList.append('+' + aclTarget)
                elif aclAccess == 'work':
                    writeList.append('+' + aclTarget)
        if len(readList) + len(writeList):
            smbConf = smbConf + "        valid users = " + " ".join(readList) + " " + " ".join(writeList) + "\n"
        if len(readList):
            smbConf = smbConf + "        read list = " + " ".join(readList) + "\n"
        if len(writeList):
            smbConf = smbConf + "        write list = " + " ".join(writeList) + "\n"
        smbConf = smbConf + "\n"

    # are there any gtwsSambaOptions specified
    if 'gtwsSambaOption' in attrs:
        for option in attrs['gtwsSambaOption']:
            smbConf = smbConf + "        " + option + "\n"

    smbConf = smbConf + "\n\n\n"

    # were specific workspaces specified on the command line
    if len(args) > 0 and gtwsName.lower() not in [a.lower() for a in args]:
        continue

    if options.verbose: 
        print '\nprocessing workspace:',
        print getQualGtwsName(ws) \
            + '    dn: ' + dn

    # create any needed directories
    wsDir = os.path.join(SAMBA_WORKSPACE, server, path)
    if options.verbose: 
        print '    ensuring workspace directory exists:  ' + wsDir
    p = subprocess.Popen([ "mkdir", "-p", wsDir ]); p.wait()
    if p.returncode:
        print >> sys.stderr, '  *** Error (re)creating directory: ' + wsDir

    # correct permissions
    wsDir = os.path.join(SAMBA_WORKSPACE)
    if options.verbose:
        print '    setting ownership and permissions on: ' + wsDir
    setOwnerGroupPerms(wsDir, ROOT_UID, MEMBERFULL_GID, 00510)

    wsDir = os.path.join(SAMBA_WORKSPACE, server)
    if options.verbose:
        print '    setting ownership and permissions on: ' + wsDir
    setOwnerGroupPerms(wsDir, ROOT_UID, MEMBERFULL_GID, 00510)

    # build and apply the ACLs
    if 'gtwsACL' in attrs:
        # for the wsDir: assemble the acls in a temp file
        fd, fname = tempfile.mkstemp(prefix="mkws.",suffix=".tmp")
        try:
            didMemberfull = False
            with open(fname, 'w') as f:
                if LOCAL_ACL == 'posix':
                    for acl in attrs['gtwsACL']:
                        aclTag, aclTarget, aclAccess = acl.split(':')
                        if aclTag == "group" and aclTarget == MEMBERFULL_GID:
                            didMemberfull = True
                        if aclAccess == 'view':
                            f.write(ACL_POSIX_WORKSPACE_VIEW.format(tag=aclTag, qualifier=aclTarget) + '\n' )
                        elif aclAccess == 'work':
                            f.write(ACL_POSIX_WORKSPACE_WORK.format(tag=aclTag, qualifier=aclTarget) + '\n' )
                    if not didMemberfull:
                        f.write(ACL_POSIX_WORKSPACE_TRAVERSE.format(tag='group', qualifier=MEMBERFULL_GID) + '\n' )
                    f.write(ACL_POSIX_WORKSPACE_TRAILER + '\n' )

                elif LOCAL_ACL == 'NFSv4':
                    for acl in attrs['gtwsACL']:
                        aclTag, aclTarget, aclAccess = acl.split(':')
                        if aclTag == "group" and aclTarget == MEMBERFULL_GID:
                            didMemberfull = True
                        if aclAccess == 'view':
                            f.write(ACL_NFSV4_WORKSPACE_VIEW.format(tag=aclTag, qualifier=aclTarget) + '\n' )
                        elif aclAccess == 'work':
                            f.write(ACL_NFSV4_WORKSPACE_WORK.format(tag=aclTag, qualifier=aclTarget) + '\n' )
                    if not didMemberfull:
                        f.write(ACL_NFSV4_WORKSPACE_TRAVERSE.format(tag='group', qualifier=MEMBERFULL_GID) + '\n' )
                    f.write(ACL_NFSV4_WORKSPACE_TRAILER + '\n' )
                os.close(fd)

            # construct the command to apply the acls
            wsDir = os.path.join(SAMBA_WORKSPACE, server, path)
            cmd = [ os.path.join( os.path.split(sys.argv[0])[0], "setfacl_recursively.sh" ),
                    '-u', attrs['gtwsOwnerUid'][0],
                    '-g', MEMBERLESS_GID,
                    '-p', '02770',
                    fname, wsDir ]
            if options.force:
                cmd.insert(1, '-f')
            if options.verbose:
                cmd.insert(1, '-v')
    
            # apply them
            if options.verbose: 
                print '    applying ACLs to workspace:           ' + wsDir
                p = subprocess.Popen(cmd); p.wait()
            else:
                with open('/dev/null', 'w') as f:
                    p = subprocess.Popen(cmd, stdout=f); p.wait()
            if p.returncode:
                print >> sys.stderr, '  *** Error applying ACLs: ' + wsDir + " (" + str(p.returncode) + ")"
    
        finally:
            # for the wsDir: cleanup temp file
            os.unlink(fname)
 
# write out the smb conf for workspaces
with open(os.path.join(SAMBA_ROOT, SAMBA_WORKSPACE_CONF), 'w') as f:
    f.write(smbConf)
setOwnerGroupPerms(os.path.join(SAMBA_ROOT, SAMBA_WORKSPACE_CONF), '0', '0', 00664)

