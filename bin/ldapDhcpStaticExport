#! /usr/local/bin/python

import sys
import os
import ldap
import subprocess
from optparse import OptionParser
from datetime import datetime
from pytz import timezone

sys.path.append(os.path.realpath(os.path.join(__file__, '..', '..', 'conf')))
from ldapConf import *
from ldapUtil import *


################################################################################
# global constants
################################################################################
version="%prog: 2013-04-19"
modifiedBy="Garry Thuna"


################################################################################
# the ldap queries
################################################################################
def queryDevice(con):
    baseDN = BASE_DN
    filter = '(&(objectClass=gtDevice)(gtFQDN=*))'
    attrs  = [ 'gtName', 'gtFQDN', 'gtAuxDnsEntry' ]
    qr = con.search_s( baseDN, ldap.SCOPE_SUBTREE, filter, attrs )
    return qr

def queryInterface(con, baseDN):
    filter = '(objectClass=gtInterfaceStatic)'
    attrs  = [ 'objectClass', 'gtInterfaceName', 'gtMacAddress', 'gtIpv4Address', 'gtFQDN' ]
    qr = con.search_s( baseDN, ldap.SCOPE_SUBTREE, filter, attrs )
    return qr


################################################################################
# parse command line options
################################################################################
usage = "usage: %prog [options]" 
description = "Extract static DNS information from the DIT and create ISC dhcpd host entries"
parser = OptionParser(usage=usage, version=version, description=description)
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="show processing details [default: %default]")
(options, args) = parser.parse_args()


################################################################################
# bind to the ldap server 
#     run the queries
################################################################################
con = ldap.initialize(BIND_URI_SERVER)
if BIND_TLS:
    con.start_tls_s()
con.simple_bind_s(BIND_DN_DNS_DHCP, BIND_PW_DNS_DHCP)

qr = queryDevice(con)
qDevices = sorted( qr, key=lambda r: ','.join(r[0].split(',')[::-1]).lower() )
for host in qDevices:
    hostDN, hostAttrs = host
    gtFQDN, gtName  = hostAttrs['gtFQDN'][0], hostAttrs['gtName'][0]

    qInterfaces = queryInterface(con, hostDN)
    for iface in qInterfaces:
        ifDN, ifAttrs = iface
        gtInterfaceName  = ifAttrs['gtInterfaceName'][0]
        gtMacAddress  = ifAttrs['gtMacAddress'][0]

        if 'gtIpv4Address' in ifAttrs:
            gtIpv4Address = ifAttrs['gtIpv4Address'][0]
        else:
            continue  # no gtIpv4Address address defined

        if 'gtFQDN' in ifAttrs:   # interface locally defines FQDN overriding host FQDN
            useFQDN = ifAttrs['gtFQDN'][0]
        else:
            useFQDN = gtFQDN

        print "host {0:50} {{".format(useFQDN + "_" + gtInterfaceName) ,
        print "hardware ethernet {0:17};".format(gtMacAddress) ,
        print "fixed-address {0:15};".format(gtIpv4Address) ,
        print "}}"


con.unbind_s()

