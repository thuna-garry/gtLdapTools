#! /usr/bin/python

import sys
import ldap
from optparse import OptionParser
import textwrap

from ldapConf import *
from ldapUtil import *


####################################################################################
# global constants
####################################################################################
version="%prog: 2012-09-03"
modifiedBy="Garry Thuna"


###################################################################################
# parse command line options
###################################################################################
usage = "usage: %prog [options] [gtws1 [[gtws2] [[...]]]" 
description = "Print the list of workspaces defined under " + BASE_DN
parser = OptionParser(usage=usage, version=version, description=description)
parser.add_option("-a", "--access", action="store_true", dest="showAccess", default=False,
                        help="show the access list for each workspace [default: %default]")
parser.add_option("-u", "--user", action="store_true", dest="showUsers", default=False,
                        help="show users that have access, and implies -a [default: %default]")
parser.add_option("-s", "--server", action="store", type="string", dest="server",
                        help="restrict workspaces belonging to server")
(options, args) = parser.parse_args()


####################################################################################
# bind to the ldap server
#     do the preliminary procssing of users and groups
#     do the preliminary procssing of workspaces
####################################################################################
con = ldap.initialize(BIND_URI)
con.simple_bind_s(BIND_DN, BIND_PW)

groups,                \
    users,             \
     gnum2idx,         \
     gid2idx,          \
     uid2idx,          \
     belongsTo,        \
    workspaces,        \
     gtwsName2ws,       \
     gtwsName2path,     \
     gnum2gtwsName,     \
    servers,           \
     gtsName2server  = preProcessLdapObjects(con)

con.unbind_s()


####################################################################################
# utility function
####################################################################################
def showAclGroupMembers(aclType, aclName):
    if aclType == 'group':
        g = groups[gid2idx[aclName]]
        userString = ''
        for m in g[1]['memberUid']:
            userString = userString + ', ' + m + ' (' + users[ uid2idx[ m ] ][1]['cn'][0] + ')'
        for s in textwrap.wrap(userString[2:], 80):
            print ''.ljust(12) + s


print '==============================================================='
print '= Workspace list                                              ='
print '==============================================================='

for ws in workspaces:
    dn, attrs = ws

    # skip if not requested on the command line
    if len(args) > 0 and attrs['gtwsName'][0].lower() not in [a.lower() for a in args]:
       continue

    # skip if not for command line requested server
    if options.server and getDNattr(dn, 'gtsName').lower() != options.server.lower():
       continue

    print getQualGtwsName(ws), gtwsName2path[getQualGtwsName(ws)]

    if options.showAccess or options.showUsers:
        for acl in attrs['gtwsACL']:
            aclType, aclName, aclPerm = acl.split(':')
            print aclType.rjust(9) + ': ' + aclPerm.ljust(4) + aclName
	    if options.showUsers:
                showAclGroupMembers(aclType, aclName)
        print

