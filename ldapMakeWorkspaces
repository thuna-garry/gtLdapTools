#! /usr/local/bin/python

import os
import ldap
import subprocess
from optparse import OptionParser
import tempfile

from ldapConf import *
from ldapUtil import *


###################################################################################
# global constants
###################################################################################
version="%prog: 2012-09-26"
modifiedBy="Garry Thuna"


###################################################################################
# parse command line options
###################################################################################
usage = "usage: %prog [options] [aws1 [[aws2] [[...]]]" 
description = "Ensures that the workspace directory exists, "  +\
              "that it has correct user, group and acl"
parser = OptionParser(usage=usage, version=version, description=description)
parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="show changes made to file system [default: %default]")
(options, args) = parser.parse_args()


###################################################################################
# bind to the ldap server
#     do the preliminary procssing of users and groups
#     do the preliminary procssing of workspaces
###################################################################################
con = ldap.initialize(BIND_URI)
if BIND_TLS:
    con.start_tls_s()
con.simple_bind_s(BIND_DN, BIND_PW)

groups,                \
    users,             \
     gid2group,        \
     uid2user,         \
     belongsTo,        \
    workspaces,        \
     gtwsName2ws,      \
     gtwsName2path,    \
     gid2gtwsName,     \
     uid2gtwsName,     \
    servers,           \
     gtsName2server  = preProcessLdapObjects(con)

con.unbind_s()


###################################################################################
# set up the workspaces
###################################################################################
smbConf = ''  #string in which to accumulate the samba share definitions
for ws in workspaces:
    dn, attrs = ws
    gtwsName = attrs['gtwsName'][0]

    # is the workspace located on this server
    server, path = gtwsName2path[getQualGtwsName(ws)]
    if server != SERVER_SHORT_NAME:
        continue  #foreign ws

    # accumulate the share definition in a string
    wsDir = os.path.join(SAMBA_WORKSPACE, server, path)
    smbConf = smbConf + SAMBA_WORKSPACE_TEMPLATE.format(
            shareName    = gtwsName,
            shareComment = attrs.get('description', ['no description supplied'])[0],
            sharePath    = wsDir
        )

    # sanity check that the workspace owner is valid
    if attrs['gtwsOwnerUid'][0] not in uid2user:
        print >> sys.stderr, '  *** Error: workspace "' + gtwsName \
                             + '" has gtwsOwnerUid "' \
                             + aclTarget + '" which is not a valid userId'

    # determine the access lists for the workspace
    readList = []
    writeList = []
    for acl in attrs['gtwsACL']:
        aclTag, aclTarget, aclAccess = acl.split(':')
        if aclTag.lower() == "user":
            if aclTarget not in uid2user:
                print >> sys.stderr, '  *** Error: workspace "' + gtwsName \
                                     + '" has acl qualifier "' \
                                     + aclTarget + '" which is not a valid userId'
            if aclAccess == 'view':
                readList.append(aclTarget)
            elif aclAccess == 'work':
                writeList.append(aclTarget)
        elif aclTag.lower() == "group":
            if aclTarget not in gid2group:
                print >> sys.stderr, '  *** Error: workspace "' + gtwsName \
                                     + '" has acl qualifier "' \
                                     + aclTarget + '" which is not a valid groupId'
            if aclAccess == 'view':
                readList.append('+' + aclTarget)
            elif aclAccess == 'work':
                writeList.append('+' + aclTarget)
    if len(readList) + len(writeList):
        smbConf = smbConf + "        valid users = " + " ".join(readList) + " " + " ".join(writeList) + "\n"
    if len(readList):
        smbConf = smbConf + "        read list = " + " ".join(readList) + "\n"
    if len(writeList):
        smbConf = smbConf + "        write list = " + " ".join(writeList) + "\n"
    smbConf = smbConf + "\n\n\n"

    # were specific workspaces specified on the command line
    if len(args) > 0 and gtwsName.lower() not in [a.lower() for a in args]:
        continue

    if options.verbose: 
        print 'processing workspace:',
        print getQualGtwsName(ws) \
            + '    dn: ' + dn

    # create any needed directories
    wsDir = os.path.join(SAMBA_WORKSPACE, server, path)
    if options.verbose: 
        print '    ensuring workspace directory exists:  ' + wsDir
    p = subprocess.Popen([ "mkdir", "-p", wsDir ]); p.wait()
    if p.returncode:
        print >> sys.stderr, '  *** Error (re)creating directory: ' + wsDir

    # correct permissions
    if options.verbose:
        print '    setting ownership and permissions on: ' + wsDir
    wsDir = os.path.join(SAMBA_WORKSPACE)
    setOwnerGroupPerms(wsDir, ROOT_UID, MEMBERFULL_GID, 00510)
    wsDir = os.path.join(SAMBA_WORKSPACE, server)
    setOwnerGroupPerms(wsDir, ROOT_UID, MEMBERFULL_GID, 00510)
    wsDir = os.path.join(SAMBA_WORKSPACE, server, path)
    setOwnerGroupPerms(wsDir, attrs['gtwsOwnerUid'][0], MEMBERLESS_GID, 02700)

    # for the wsDir: assemble the acls in a temp file
    fd, fname = tempfile.mkstemp()
    didMemberfull = False
    with open(fname, 'w') as f:
        if LOCAL_ACL == 'posix':
            for acl in attrs['gtwsACL']:
                aclTag, aclTarget, aclAccess = acl.split(':')
                if aclTag == "group" and aclTarget == MEMBERFULL_GID:
                    didMemberfull = True
                if aclAccess == 'view':
                    f.write(ACL_POSIX_WORKSPACE_VIEW.format(tag=aclTag, qualifier=aclTarget) + '\n' )
                elif aclAccess == 'work':
                    f.write(ACL_POSIX_WORKSPACE_WORK.format(tag=aclTag, qualifier=aclTarget) + '\n' )
            if not didMemberfull:
                f.write(ACL_POSIX_WORKSPACE_TRAVERSE.format(tag='group', qualifier=MEMBERFULL_GID) + '\n' )
            f.write(ACL_POSIX_WORKSPACE_TRAILER + '\n' )

        else: #LOCAL_ACL == 'NFSv4':
            for acl in attrs['gtwsACL']:
                aclTag, aclTarget, aclAccess = acl.split(':')
                if aclTag == "group" and aclTarget == MEMBERFULL_GID:
                    didMemberfull = True
                if aclAccess == 'view':
                    f.write(ACL_NFSV4_WORKSPACE_VIEW.format(tag=aclTag, qualifier=aclTarget) + '\n' )
                elif aclAccess == 'work':
                    f.write(ACL_NFSV4_WORKSPACE_WORK.format(tag=aclTag, qualifier=aclTarget) + '\n' )
            if not didMemberfull:
                f.write(ACL_NFSV4_WORKSPACE_TRAVERSE.format(tag='group', qualifier=MEMBERFULL_GID) + '\n' )
            f.write(ACL_NFSV4_WORKSPACE_TRAILER + '\n' )
    os.close(fd)

    # for the wsDir: apply the acls
    if LOCAL_OS == 'linux':
        cmd = [ "setfacl", "-R", "--set-file", fname, wsDir ]
    else: #LOCAL_OS == 'bsd':
        exe = os.path.join( os.path.split(sys.argv[0])[0], "setfacl_recursively.sh" )
        cmd = [ exe, fname, wsDir ]
        
    if options.verbose: 
        print '    applying ACLs to workspace:           ' + wsDir
        p = subprocess.Popen(cmd); p.wait()
    else:
        with open('/dev/null', 'w') as f:
            p = subprocess.Popen(cmd, stdout=f); p.wait()
    if p.returncode:
        print >> sys.stderr, '  *** Error applying ACLs: ' + wsDir + " (" + str(p.returncode) + ")"

    # for the wsDir: cleanup temp file
    os.unlink(fname)

#   # for each of the parent dirs of wsDir:
#   #    provide 'x' attribute so those with access to wsDir can traverse through it
#   parent = path
#   while True:
#       #print parent
#       parent = os.path.split(parent)[0]
#       if not parent:
#           break  #no more parents
#       pDir = os.path.join(SAMBA_WORKSPACE, server, parent)
#       for acl in attrs['gtwsACL']:
#           exe = os.path.join( os.path.split(sys.argv[0])[0], "setfacl_X_onDir.sh" )
#           if options.verbose: 
#               print '    applying ACL({0}) to parent:   '.format(acl[:-4]) + pDir
#               p = subprocess.Popen([ exe, acl[:-4], pDir ]); p.wait()
#           else:
#               with open('/dev/null', 'w') as f:
#                   p = subprocess.Popen([ exe, acl[:-4], pDir ], stdout=f); p.wait()
#           if p.returncode:
#               print >> sys.stderr, '  *** Error applying ACLs: ' + pDir
    
 
# write out the smb conf for workspaces
with open(os.path.join(SAMBA_ROOT, SAMBA_WORKSPACE_CONF), 'w') as f:
    f.write(smbConf)
setOwnerGroupPerms(os.path.join(SAMBA_ROOT, SAMBA_WORKSPACE_CONF), '0', '0', 00664)

